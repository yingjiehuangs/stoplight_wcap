openapi: 3.0.0
info:
  title: WCAP API define
  description: WCAP API define
  contact:
    name: API Support
    email: jeremy.peng@asml.com
  version: 0.0.1
servers:
  - url: wcap-brion-tw.asml.com/api
    description: wcap api
paths:
  '/teams/{id}':
    summary: teams related api
    description: teams related api
    get:
      summary: get team information
      description: |-
        get team information from given team id,
        if team id is empty then return the top team information,
        recursive decide whether fetch sub teams recursively
      operationId: getTeam
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamInfo'
              examples:
                team with id:
                  value:
                    code: 0
                    errorMessage: ''
                    Teams:
                      - id: 5efd533c4a7aa2cada094eb7
                        parentId: '000000000000000000000000'
                        name: AS
                        owners:
                          - liang.zhao@asml.com
                        subTeams:
                          - 5efd57768125fa32e73037b8
                          - 5efda20b23eb8c7dd03b5cae
                        members:
                          - liang.zhao@asml.com
                        LastModified: '1593680395713845000'
                'teams without id ':
                  value:
                    code: 0
                    errorMessage: ''
                    Teams:
                      - id: 5efd533c4a7aa2cada094eb7
                        parentId: '000000000000000000000000'
                        name: AS
                        owners:
                          - liang.zhao@asml.com
                        subTeams:
                          - 5efd57768125fa32e73037b8
                          - 5efda20b23eb8c7dd03b5cae
                        members:
                          - liang.zhao@asml.com
                        LastModified: '1593680395713845000'
                      - id: 5efd56a78125fa32e73037b7
                        parentId: '000000000000000000000000'
                        name: PEG
                        owners:
                          - yanjun.xiao@asml.com
                        subTeams: null
                        members:
                          - yanjun.xiao@asml.com
                        LastModified: '1593661095941728200'
                      - id: 5efd9e2fd7f3668197965d5d
                        parentId: '000000000000000000000000'
                        name: SQA
                        owners:
                          - qingguang.ye@asml.com
                        subTeams: null
                        members:
                          - qingguang.ye@asml.com
                        LastModified: '1593679407014292300'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      tags:
        - teams
      parameters:
        - schema:
            type: boolean
          in: query
          name: recursive
          description: 'whether fetch sub teams recursively  '
    post:
      summary: create team
      operationId: createTeam
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamInfo'
              examples:
                create team: {}
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: |-
        create a team under given parent team id,
        if {id} is empty, it mean create top level team
      parameters: []
      tags:
        - teams
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/teamInfo'
            examples: {}
          application/xml:
            schema:
              $ref: '#/components/schemas/teamInfo'
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: update team
      operationId: updateTeam
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamInfo'
              examples: {}
      description: 'update a whold team (decide by {id}) from input'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/teamInfo'
      tags:
        - teams
    delete:
      summary: delete team
      operationId: deleteTeam
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      description: 'delete a team '
      tags:
        - teams
  '/categories/{teamId}':
    parameters:
      - schema:
          type: string
        name: teamId
        in: path
        required: true
        description: ''
    get:
      summary: get category
      tags:
        - categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      operationId: getCategory
      description: Get category from team id
    post:
      summary: Create Category
      operationId: createCategory
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamInfo'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      description: create category for a team
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/category'
        description: ''
      tags:
        - categories
    put:
      summary: Update Category
      operationId: updateCategory
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      description: update category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/category'
      tags:
        - categories
    delete:
      summary: Delete Category
      operationId: deleteCategory
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      description: delete category
      tags:
        - categories
  /login:
    post:
      summary: login
      operationId: login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Code:
                    type: string
                    description: "return code:\nconst (\n\trespOK respCode = 0\n\trespNoAuth\n\trespAuthFail\n\trespNoPermission\n\trespFailToParseBody\n\trespDbErr\n\trespNotExist\n\trespFailToGenToken\n)\n"
                  Content:
                    type: string
                    description: token generated by server
                  User:
                    type: object
                    properties:
                      ID:
                        type: string
                        description: user id/name
                      Email:
                        type: string
                        description: user email
                      Permission:
                        type: integer
              examples:
                example:
                  value:
                    Code: 0
                    Content: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImplcmVteS5wZW5nQGFzbWwuY29tIiwiZXhwIjoxNTkxMTcxNDE5LCJwZXJtIjoyLCJ1bmFtZSI6ImplcGVuZyJ9.wNPqUA3aTgRUWANh4N3SWTyqvCD-2zPrvrILolubIvc
                    User:
                      ID: jepeng
                      Email: jeremy.peng@asml.com
                      Permission: 2
      description: login with ASML LDAP authenticate server
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                User:
                  type: string
                  description: User account
                Passwd:
                  type: string
                  description: 'User password '
            examples:
              example:
                value:
                  User: jepeng
                  Passwd: XXXXXXX
      tags:
        - auth
  /records:
    get:
      summary: Find records
      tags: []
      responses:
        '200':
          description: Forbidden
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: findRecrds
      description: |-
        without param, default get all records.
        use filter to select records:
          1.find repoter name like "xxxyinjiexxx" all records, add params in url '?filter=reporter like "yingjie"'.
          2.find records during a certain period of timeï¼Œadd params in url 
          "?filter=reporttime>=1598252348320800000 and reporttime<1598252348320899999".
          3.return count of find records, "?returntotal=1".
          3.use limit to return limited front records,"?limit=10".
          4.use skip to skip some reocrds and return remain records, "?skip=10".
          5.return actual fields, just need reporter and reporttime, "?projection=reporter,reporttime".
          6.use sortkey to sort records with special field, defalut ascend,sort with reportertime, "?sortkey=reportertime".
          7.sort with reporttime in descend way, "?sortkey=reporttime&desc=true".
          8.combine find, find yingjie's records within period of time,sort by reporttime in desc, only return fisrt 5 records,
          "?filter=reporter="yingjie" and reporttime>=1598252348320800000 and reporttime<1598252348320899999&sortkey=reporttime&desc=true&limit=5"
    post:
      summary: Upsert record
      operationId: upsertRecord
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: |-
        add record or update record
        1.if record.ID="", it means add a new record, else it means update a record.
        2.TeamID,RecordFields,ReportTime are required.
        3.when add record, reportr will be overwrite as user's email,make sure team exist and teamID is correct,cause it will check if reporter belong to this team, if no, it will return error.
        4.admin can update any record, user could only update his own records.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
            examples:
              example-1:
                value:
                  Reporter: testAdmin@asml.com
                  TeamID: sdkkjdjfdkjfjj557
                  RecordFields:
                    Category: Realse
                    subCategory: EPDS
                    WorkCentent: sign off EPDS
                    Planed: 2
                    Actual: 2
                    Completion: 0.8
                  DailyFields:
                    - Actual: 1
                      Completion: 0.5
                      Date: '2020-8-20'
                      Detail: write document
                    - Actual: 1
                      Completion: 0.8
                      Date: '2020-8-21'
                      Detail: write document
                  ReportTime: '1598252348320892600'
                  RecordFrequency: 0
  '/record/{recordID}':
    parameters:
      - schema:
          type: string
        name: recordID
        in: path
        required: true
    get:
      summary: Get record
      tags: []
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: getRecordByID
      description: 'get record by id,need pass id'
    delete:
      summary: Delete record
      operationId: deleteRecord
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      description: 'admin can delete any record, user could delete his own records'
tags:
  - name: teams
    description: teams related api
components:
  schemas:
    teamInfo:
      title: teamInfo
      type: object
      x-examples:
        teamInfo:
          id: 5efd533c4a7aa2cada094eb7
          parentId: '000000000000000000000000'
          name: AS
          owners:
            - liang.zhao@asml.com
          subTeams:
            - 5efd57768125fa32e73037b8
            - 5efda20b23eb8c7dd03b5cae
          members:
            - liang.zhao@asml.com
          LastModified: '1593680395713845000'
      x-tags:
        - models
      properties:
        members:
          type: array
          description: 'members email list '
          items:
            type: string
        subteams:
          type: array
          description: sub team info
          items:
            type: object
            properties:
              id:
                type: string
                description: sub team id
        id:
          type: string
          description: |
            team id
        parentId:
          type: string
          description: team parent id
        owners:
          type: array
          description: owner email list
          items:
            type: string
        recordFrequency:
          type: integer
          description: |-
            record frequency, 
            enum {
              daily = 0,
              weekly = 1,

            }
        lastModified:
          type: string
          description: last modified time
        name:
          type: string
          description: team name
    category:
      title: category
      type: object
      properties:
        teamId:
          type: string
        categories:
          type: array
          items:
            type: object
            properties:
              categoryName:
                type: array
                items:
                  type: string
        lastModified:
          type: string
      x-examples:
        example:
          teamID: '12345'
          Categories:
            - Release:
                - EPDS
                - TestPlan
            - Customer:
                - Enagement
                - ...
            - MRD:
                - ...
          LastModified: XXX
      description: ''
      x-tags:
        - models
    record:
      title: record
      type: object
      x-tags:
        - models
      properties:
        reporter:
          type: string
          description: reporter email
        teamId:
          type: string
        category:
          type: string
        subCategory:
          type: string
        workContent:
          type: string
        plan:
          type: string
        actual:
          type: string
        completion:
          type: string
        dailyRecord:
          type: array
          description: daily log work
          items:
            type: object
            properties:
              date:
                type: string
              detail:
                type: string
              acutal:
                type: string
              completion:
                type: string
        status:
          type: string
        risk:
          type: string
        helpNeed:
          type: string
        comment:
          type: string
        rating:
          type: integer
          description: rating from 0 - 5
      x-examples:
        example-1:
          id: '12324'
          reportor: adsf@asml.com
          teamId: lkfjds23213213dsaf
          recordFields:
            category: Release
            subCategory: E20.10
            content: testing
            Plan: 2
            acutal: 3
            needHelp: need to check with RD
          dailyFields:
            - date: '2020-6-7'
              detail: testing
              actual: 1
            - date: '2020-6-8'
              detail: testing
              actual: 1
          reportTime: '2020-6-8'
          createTime: '2020-6-8'
      description: ''
    project:
      title: project
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        ProjectLeader:
          type: string
        Members:
          type: array
          items:
            type: string
        Target:
          type: string
        StartDate:
          type: integer
        EndDate:
          type: integer
        Milestones:
          type: array
          items:
            $ref: '#/components/schemas/Milestone'
        Fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldConfig'
      x-tags:
        - models
    Milestone:
      title: Milestone
      type: object
      properties:
        Name:
          type: string
        Target:
          type: string
        DueDate:
          type: string
      x-tags:
        - models
    FieldConfig:
      title: FieldConfig
      type: object
      properties:
        Name:
          type: string
        Optional:
          type: boolean
        Type:
          type: integer
          description: "const (\n\tFieldDate = 0\n\tFieldText = 1\n\tFieldList = 2\n\tFieldNumber = 3\n\tFieldPercentage = 4\n\tFieldLink = 5\n)"
        Description:
          type: string
        Options:
          type: string
          description: options list if Type is FieldList
      x-tags:
        - models
      description: ''
  parameters:
    lon:
      name: lon
      in: query
      description: '**Longitude**. *Example: 139*. Longitude coordinate of the location of your interest. Must use with `lat`.'
      schema:
        type: string
